{` -*- narya-prog-args: ("-proofgeneral" "-parametric" "-direction" "p,rel,Br") -*- `}

import "isfibrant"
import "bookhott"

{` Facts about the interaction of Book HoTT equivalences (regarded as the outer 2LTT layer) and HOTT identity types. `}

{` An Id of equalities induces an equality involving transport `}
def Id_eq (A0 A1 : Type) (A2 : Br Type A0 A1) (a00 : A0) (a01 : A1)
  (a02 : A2 a00 a01) (a10 : A0) (a11 : A1) (a12 : A2 a10 a11)
  (a20 : eq A0 a00 a10) (a21 : eq A1 a01 a11)
  (a22 : Br eq A2 a02 a12 a20 a21)
  : eq (A2 a10 a11)
      (eq.trr2 A0 A1 (x y ‚Ü¶ A2 x y) a00 a10 a20 a01 a11 a21 a02) a12
  ‚âî match a22 [ rfl. ‚§á rfl. ]

{` An Id of equivalences induces an equivalence on Ids. `}
def Id_eqv (A0 : Type) (A1 : Type) (A2 : Br Type A0 A1) (B0 : Type)
  (B1 : Type) (B2 : Br Type B0 B1) (e0 : A0 ‚âÖ B0) (e1 : A1 ‚âÖ B1)
  (e2 : Br eqv A2 B2 e0 e1) (b0 : B0) (b1 : B1)
  : A2 (e0 .fro b0) (e1 .fro b1) ‚âÖ B2 b0 b1
  ‚âî
  let f0 ‚âî e0 .to in
  let g0 ‚âî e0 .fro in
  let ap_g0 ‚âî eq.ap B0 A0 g0 in
  let fg0 : B0 ‚Üí B0 ‚âî x ‚Ü¶ f0 (g0 x) in
  let gfg0 : B0 ‚Üí A0 ‚âî x ‚Ü¶ g0 (f0 (g0 x)) in
  let Œµ0 ‚âî e0 .to_fro in
  let Œ∑0 ‚âî e0 .fro_to in
  let f1 ‚âî e1 .to in
  let g1 ‚âî e1 .fro in
  let ap_g1 ‚âî eq.ap B1 A1 g1 in
  let fg1 : B1 ‚Üí B1 ‚âî x ‚Ü¶ f1 (g1 x) in
  let gfg1 : B1 ‚Üí A1 ‚âî x ‚Ü¶ g1 (f1 (g1 x)) in
  let Œµ1 ‚âî e1 .to_fro in
  let Œ∑1 ‚âî e1 .fro_to in
  let f2 ‚âî e2 .to in
  let g2 ‚âî e2 .fro in
  let Œ∑2 ‚âî e2 .fro_to in
  let Œµ2 ‚âî e2 .to_fro in
  adjointify (A2 (g0 b0) (g1 b1)) (B2 b0 b1)
    (a2 ‚Ü¶
     eq.trr2 B0 B1 (b0 b1 ‚Ü¶ B2 b0 b1) (fg0 b0) b0 (Œµ0 b0) (fg1 b1) b1
       (Œµ1 b1) (f2 a2)) (b2 ‚Ü¶ g2 b2)
    (a2 ‚Ü¶
     eq.cat (A2 (g0 b0) (g1 b1))
       (g2
          (eq.trr2 B0 B1 (x y ‚Ü¶ B2 x y) (fg0 b0) b0 (Œµ0 b0) (fg1 b1) b1
             (Œµ1 b1) (f2 a2)))
       (eq.trr2 A0 A1 (x y ‚Ü¶ A2 x y) (gfg0 b0) (g0 b0)
          (ap_g0 (fg0 b0) b0 (Œµ0 b0)) (gfg1 b1) (g1 b1)
          (ap_g1 (fg1 b1) b1 (Œµ1 b1)) (g2 (f2 a2))) a2
       (eq.trr2_ap B0 B1 (x y ‚Ü¶ B2 x y) A0 A1 (x y ‚Ü¶ A2 x y) g0 g1
          (x0 x1 x2 ‚Ü¶ g2 x2) (fg0 b0) b0 (Œµ0 b0) (fg1 b1) b1 (Œµ1 b1)
          (f2 a2))
       (Id_eq A0 A1 A2 (gfg0 b0) (gfg1 b1) (g2 (f2 a2)) (g0 b0) (g1 b1) a2
          (ap_g0 (fg0 b0) b0 (Œµ0 b0)) (ap_g1 (fg1 b1) b1 (Œµ1 b1))
          (eq.trl2 (eq A0 (gfg0 b0) (g0 b0)) (eq A1 (gfg1 b1) (g1 b1))
             (u v ‚Ü¶ Br eq A2 (g2 (f2 a2)) a2 u v)
             (ap_g0 (fg0 b0) b0 (Œµ0 b0)) (Œ∑0 (g0 b0))
             (fro_to_fro A0 B0 e0 b0) (ap_g1 (fg1 b1) b1 (Œµ1 b1))
             (Œ∑1 (g1 b1)) (fro_to_fro A1 B1 e1 b1) (Œ∑2 a2))))
    (b2 ‚Ü¶
     Id_eq B0 B1 B2 (fg0 b0) (fg1 b1) (f2 (g2 b2)) b0 b1 b2 (Œµ0 b0) (Œµ1 b1)
       (Œµ2 b2))

{` Fibrancy transports across equivalences. `}
def ùïóeqv (A B : Type) (e : A ‚âÖ B) (ùïóA : isFibrant A) : isFibrant B ‚âî [
| .trr.p ‚Ü¶ b0 ‚Ü¶ e.1 .to (ùïóA.2 .trr (e.0 .fro b0))
| .trl.p ‚Ü¶ b1 ‚Ü¶ e.0 .to (ùïóA.2 .trl (e.1 .fro b1))
| .liftr.p ‚Ü¶ b0 ‚Ü¶
    eq.trr B.0 (b ‚Ü¶ B.2 b (e.1 .to (ùïóA.2 .trr (e.0 .fro b0))))
      (e.0 .to (e.0 .fro b0)) b0 (e.0 .to_fro b0)
      (e.2 .to (ùïóA.2 .liftr (e.0 .fro b0)))
| .liftl.p ‚Ü¶ b1 ‚Ü¶
    eq.trr B.1 (b ‚Ü¶ B.2 (e.0 .to (ùïóA.2 .trl (e.1 .fro b1))) b)
      (e.1 .to (e.1 .fro b1)) b1 (e.1 .to_fro b1)
      (e.2 .to (ùïóA.2 .liftl (e.1 .fro b1)))
| .id.p ‚Ü¶ b0 b1 ‚Ü¶
    ùïóeqv (A.2 (e.0 .fro b0) (e.1 .fro b1)) (B.2 b0 b1)
      (Id_eqv A.0 A.1 A.2 B.0 B.1 B.2 e.0 e.1 e.2 b0 b1)
      (ùïóA.2 .id (e.0 .fro b0) (e.1 .fro b1))]

{` Symmetry is an equivalence `}
def sym_eqv (A00 A01 : Type) (A02 : Br Type A00 A01) (A10 A11 : Type)
  (A12 : Br Type A10 A11) (A20 : Br Type A00 A10) (A21 : Br Type A01 A11)
  (A22 : Br (Br Type) A02 A12 A20 A21) (a00 : A00) (a01 : A01)
  (a02 : A02 a00 a01) (a10 : A10) (a11 : A11) (a12 : A12 a10 a11)
  (a20 : A20 a00 a10) (a21 : A21 a01 a11)
  : A22 a02 a12 a20 a21 ‚âÖ sym A22 a20 a21 a02 a12
  ‚âî (
  to ‚âî a22 ‚Ü¶ sym a22,
  fro ‚âî a22 ‚Ü¶ sym a22,
  to_fro ‚âî _ ‚Ü¶ rfl.,
  fro_to ‚âî _ ‚Ü¶ rfl.,
  to_fro_to ‚âî _ ‚Ü¶ rfl.)

def 312_eqv (A000 : Type) (A001 : Type) (A002 : Br Type A000 A001)
  (A010 : Type) (A011 : Type) (A012 : Br Type A010 A011)
  (A020 : Br Type A000 A010) (A021 : Br Type A001 A011)
  (A022 : Br (Br Type) A002 A012 A020 A021)
  {` Top face `}
  (A100 : Type) (A101 : Type) (A102 : Br Type A100 A101) (A110 : Type)
  (A111 : Type) (A112 : Br Type A110 A111) (A120 : Br Type A100 A110)
  (A121 : Br Type A101 A111) (A122 : Br (Br Type) A102 A112 A120 A121)
  {` Front face `}
  (A200 : Br Type A000 A100) (A201 : Br Type A001 A101)
  (A202 : Br (Br Type) A002 A102 A200 A201)
  {` Back face `}
  (A210 : Br Type A010 A110) (A211 : Br Type A011 A111)
  (A212 : Br (Br Type) A012 A112 A210 A211)
  {` Left face `}
  (A220 : Br (Br Type) A020 A120 A200 A210)
  {` Right face `}
  (A221 : Br (Br Type) A021 A121 A201 A211)
  {` Center `}
  (A222 : Br (Br (Br Type)) A022 A122 A202 A212 A220 A221) (a000 : A000)
  (a001 : A001) (a002 : A002 a000 a001) (a010 : A010) (a011 : A011)
  (a012 : A012 a010 a011) (a020 : A020 a000 a010) (a021 : A021 a001 a011)
  (a022 : A022 a002 a012 a020 a021)
  {` Top face `}
  (a100 : A100) (a101 : A101) (a102 : A102 a100 a101) (a110 : A110)
  (a111 : A111) (a112 : A112 a110 a111) (a120 : A120 a100 a110)
  (a121 : A121 a101 a111) (a122 : A122 a102 a112 a120 a121)
  {` Front face `}
  (a200 : A200 a000 a100) (a201 : A201 a001 a101)
  (a202 : A202 a002 a102 a200 a201)
  {` Back face `}
  (a210 : A210 a010 a110) (a211 : A211 a011 a111)
  (a212 : A212 a012 a112 a210 a211)
  {` Left face `}
  (a220 : A220 a020 a120 a200 a210)
  {` Right face `}
  (a221 : A221 a021 a121 a201 a211)
  : A222 a022 a122 a202 a212 a220 a221
    ‚âÖ A222‚ÅΩ¬≥¬π¬≤‚Åæ a220 a221 (sym a022) (sym a122) (sym a202) (sym a212)
  ‚âî (
  to ‚âî a222 ‚Ü¶ a222‚ÅΩ¬≥¬π¬≤‚Åæ,
  fro ‚âî a222 ‚Ü¶ a222‚ÅΩ¬≤¬≥¬π‚Åæ,
  to_fro ‚âî _ ‚Ü¶ rfl.,
  fro_to ‚âî _ ‚Ü¶ rfl.,
  to_fro_to ‚âî _ ‚Ü¶ rfl.)
